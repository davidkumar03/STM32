
ADC_405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  080003fc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  080003fc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000013fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000404  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001378  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004dc  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00003888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000144  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017626  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d45  00000000  00000000  0001b1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b456e  00000000  00000000  0001cf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d1475  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000568  00000000  00000000  000d14b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000d1a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003e4 	.word	0x080003e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003e4 	.word	0x080003e4

080001c8 <adc_config>:
#define CR2_ADCON		(1U<<0)
#define CR2_CONT		(1U<<1)
#define CR2_SWSTART		(1U<<30)
#define SR_EOC			(1U<<1)
void adc_config()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=ADC1_EN;
 80001cc:	4b13      	ldr	r3, [pc, #76]	@ (800021c <adc_config+0x54>)
 80001ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001d0:	4a12      	ldr	r2, [pc, #72]	@ (800021c <adc_config+0x54>)
 80001d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001d6:	6453      	str	r3, [r2, #68]	@ 0x44
	//ADC1->SQR3 =11;
	//ADC1->SQR2 |=(1U<<20);
	ADC1->SQR3  |=(1U<<0);
 80001d8:	4b11      	ldr	r3, [pc, #68]	@ (8000220 <adc_config+0x58>)
 80001da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001dc:	4a10      	ldr	r2, [pc, #64]	@ (8000220 <adc_config+0x58>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3  |=(1U<<1);
 80001e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000220 <adc_config+0x58>)
 80001e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000220 <adc_config+0x58>)
 80001ea:	f043 0302 	orr.w	r3, r3, #2
 80001ee:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3  |=(1U<<3);
 80001f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000220 <adc_config+0x58>)
 80001f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000220 <adc_config+0x58>)
 80001f6:	f043 0308 	orr.w	r3, r3, #8
 80001fa:	6353      	str	r3, [r2, #52]	@ 0x34

	ADC1->SQR1 |=SQR1_L_EN;
 80001fc:	4b08      	ldr	r3, [pc, #32]	@ (8000220 <adc_config+0x58>)
 80001fe:	4a08      	ldr	r2, [pc, #32]	@ (8000220 <adc_config+0x58>)
 8000200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000202:	62d3      	str	r3, [r2, #44]	@ 0x2c

	ADC1->CR2 |=CR2_ADCON;
 8000204:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <adc_config+0x58>)
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	4a05      	ldr	r2, [pc, #20]	@ (8000220 <adc_config+0x58>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6093      	str	r3, [r2, #8]

}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40023800 	.word	0x40023800
 8000220:	40012000 	.word	0x40012000

08000224 <start_conversion>:

void start_conversion()
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	ADC1->CR2 |=CR2_CONT;
 8000228:	4b08      	ldr	r3, [pc, #32]	@ (800024c <start_conversion+0x28>)
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	4a07      	ldr	r2, [pc, #28]	@ (800024c <start_conversion+0x28>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |=CR2_SWSTART;
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <start_conversion+0x28>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4a04      	ldr	r2, [pc, #16]	@ (800024c <start_conversion+0x28>)
 800023a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800023e:	6093      	str	r3, [r2, #8]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40012000 	.word	0x40012000

08000250 <main>:
uint32_t value=0;
int main()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=GPIOCEN;
 8000254:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <main+0x3c>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000258:	4a0c      	ldr	r2, [pc, #48]	@ (800028c <main+0x3c>)
 800025a:	f043 0304 	orr.w	r3, r3, #4
 800025e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER |=(1U<<2) | (1U<<3);
 8000260:	4b0b      	ldr	r3, [pc, #44]	@ (8000290 <main+0x40>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <main+0x40>)
 8000266:	f043 030c 	orr.w	r3, r3, #12
 800026a:	6013      	str	r3, [r2, #0]
	adc_config();
 800026c:	f7ff ffac 	bl	80001c8 <adc_config>
	start_conversion();
 8000270:	f7ff ffd8 	bl	8000224 <start_conversion>
	while(1)
	{
		//start_conversion();
		while(!(ADC1->SR & SR_EOC)) {}
 8000274:	bf00      	nop
 8000276:	4b07      	ldr	r3, [pc, #28]	@ (8000294 <main+0x44>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0302 	and.w	r3, r3, #2
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <main+0x26>
		value = (ADC1->DR);
 8000282:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <main+0x44>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	4a04      	ldr	r2, [pc, #16]	@ (8000298 <main+0x48>)
 8000288:	6013      	str	r3, [r2, #0]
		while(!(ADC1->SR & SR_EOC)) {}
 800028a:	e7f3      	b.n	8000274 <main+0x24>
 800028c:	40023800 	.word	0x40023800
 8000290:	40020800 	.word	0x40020800
 8000294:	40012000 	.word	0x40012000
 8000298:	20000020 	.word	0x20000020

0800029c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002a0:	bf00      	nop
 80002a2:	e7fd      	b.n	80002a0 <NMI_Handler+0x4>

080002a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002a8:	bf00      	nop
 80002aa:	e7fd      	b.n	80002a8 <HardFault_Handler+0x4>

080002ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b0:	bf00      	nop
 80002b2:	e7fd      	b.n	80002b0 <MemManage_Handler+0x4>

080002b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002b8:	bf00      	nop
 80002ba:	e7fd      	b.n	80002b8 <BusFault_Handler+0x4>

080002bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <UsageFault_Handler+0x4>

080002c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002f2:	f000 f83f 	bl	8000374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <SystemInit+0x20>)
 8000302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000306:	4a05      	ldr	r2, [pc, #20]	@ (800031c <SystemInit+0x20>)
 8000308:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800030c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000320:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000358 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000324:	f7ff ffea 	bl	80002fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	@ (800035c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	@ (8000360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	@ (8000364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	@ (8000368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	@ (800036c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800034e:	f000 f825 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000352:	f7ff ff7d 	bl	8000250 <main>
  bx  lr    
 8000356:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000364:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000368:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800036c:	20000028 	.word	0x20000028

08000370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <HAL_IncTick+0x20>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	461a      	mov	r2, r3
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <HAL_IncTick+0x24>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4413      	add	r3, r2
 8000384:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <HAL_IncTick+0x24>)
 8000386:	6013      	str	r3, [r2, #0]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	20000000 	.word	0x20000000
 8000398:	20000024 	.word	0x20000024

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	@ (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	@ (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	@ (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	@ (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
