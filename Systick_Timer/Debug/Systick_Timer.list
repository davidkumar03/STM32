
Systick_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e8  080003e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e8  080003e8  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003e8  080003e8  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003e8  080003e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003f0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000137e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000566  00000000  00000000  000033b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00003918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  00003af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001773a  00000000  00000000  00003c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002190  00000000  00000000  0001b37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4673  00000000  00000000  0001d50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d1b80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000560  00000000  00000000  000d1bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000d2124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003d0 	.word	0x080003d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003d0 	.word	0x080003d0

080001c8 <main>:
#define LED_PIN_13	(1U<<13)
#define LED_PIN_14 	(1U<<14)


int main()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
//	RCC->AHB1ENR |=GPIOAEN;
//
//	GPIOA->MODER |=(1U<<10);
//	GPIOA->MODER &=~(1U<<11);

	RCC->AHB1ENR |=GPIOBEN;
 80001cc:	4b17      	ldr	r3, [pc, #92]	@ (800022c <main+0x64>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a16      	ldr	r2, [pc, #88]	@ (800022c <main+0x64>)
 80001d2:	f043 0302 	orr.w	r3, r3, #2
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |=(1U<<26);
 80001d8:	4b15      	ldr	r3, [pc, #84]	@ (8000230 <main+0x68>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a14      	ldr	r2, [pc, #80]	@ (8000230 <main+0x68>)
 80001de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<27);
 80001e4:	4b12      	ldr	r3, [pc, #72]	@ (8000230 <main+0x68>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	@ (8000230 <main+0x68>)
 80001ea:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<28);
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <main+0x68>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <main+0x68>)
 80001f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<29);
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <main+0x68>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0b      	ldr	r2, [pc, #44]	@ (8000230 <main+0x68>)
 8000202:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000206:	6013      	str	r3, [r2, #0]

	while(1)
	{
		GPIOB->ODR ^=LED_PIN_13;
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <main+0x68>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	4a08      	ldr	r2, [pc, #32]	@ (8000230 <main+0x68>)
 800020e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000212:	6153      	str	r3, [r2, #20]
		GPIOB->ODR ^=LED_PIN_14;
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <main+0x68>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a05      	ldr	r2, [pc, #20]	@ (8000230 <main+0x68>)
 800021a:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800021e:	6153      	str	r3, [r2, #20]
		systickdelay(1000);
 8000220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000224:	f000 f886 	bl	8000334 <systickdelay>
		GPIOB->ODR ^=LED_PIN_13;
 8000228:	bf00      	nop
 800022a:	e7ed      	b.n	8000208 <main+0x40>
 800022c:	40023800 	.word	0x40023800
 8000230:	40020400 	.word	0x40020400

08000234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <NMI_Handler+0x4>

0800023c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <HardFault_Handler+0x4>

08000244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <MemManage_Handler+0x4>

0800024c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000250:	bf00      	nop
 8000252:	e7fd      	b.n	8000250 <BusFault_Handler+0x4>

08000254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000258:	bf00      	nop
 800025a:	e7fd      	b.n	8000258 <UsageFault_Handler+0x4>

0800025c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr

08000286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800028a:	f000 f83f 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <SystemInit+0x20>)
 800029a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800029e:	4a05      	ldr	r2, [pc, #20]	@ (80002b4 <SystemInit+0x20>)
 80002a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80002f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002bc:	f7ff ffea 	bl	8000294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	@ (80002f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80002e6:	f000 f84f 	bl	8000388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002ea:	f7ff ff6d 	bl	80001c8 <main>
  bx  lr    
 80002ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002fc:	080003f0 	.word	0x080003f0
  ldr r2, =_sbss
 8000300:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000304:	20000024 	.word	0x20000024

08000308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	@ (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000000 	.word	0x20000000
 8000330:	20000020 	.word	0x20000020

08000334 <systickdelay>:
#define  CTRL_CLKSRC          (1U<<2)
#define  CTRL_COUNTFLAG       (1U<<16)


void systickdelay(int delay)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <systickdelay+0x50>)
 800033e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000342:	605a      	str	r2, [r3, #4]

	SysTick->VAL = 0;
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <systickdelay+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC ;
 800034a:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <systickdelay+0x50>)
 800034c:	2205      	movs	r2, #5
 800034e:	601a      	str	r2, [r3, #0]

	for(int i=0;i<delay;i++)
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e009      	b.n	800036a <systickdelay+0x36>
	{
		while((SysTick->CTRL & CTRL_COUNTFLAG ) ==0)
 8000356:	bf00      	nop
 8000358:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <systickdelay+0x50>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <systickdelay+0x24>
	for(int i=0;i<delay;i++)
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	dbf1      	blt.n	8000356 <systickdelay+0x22>
		{}
	}
	SysTick->CTRL=0;
 8000372:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <systickdelay+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	e000e010 	.word	0xe000e010

08000388 <__libc_init_array>:
 8000388:	b570      	push	{r4, r5, r6, lr}
 800038a:	4d0d      	ldr	r5, [pc, #52]	@ (80003c0 <__libc_init_array+0x38>)
 800038c:	4c0d      	ldr	r4, [pc, #52]	@ (80003c4 <__libc_init_array+0x3c>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	2600      	movs	r6, #0
 8000394:	42a6      	cmp	r6, r4
 8000396:	d109      	bne.n	80003ac <__libc_init_array+0x24>
 8000398:	4d0b      	ldr	r5, [pc, #44]	@ (80003c8 <__libc_init_array+0x40>)
 800039a:	4c0c      	ldr	r4, [pc, #48]	@ (80003cc <__libc_init_array+0x44>)
 800039c:	f000 f818 	bl	80003d0 <_init>
 80003a0:	1b64      	subs	r4, r4, r5
 80003a2:	10a4      	asrs	r4, r4, #2
 80003a4:	2600      	movs	r6, #0
 80003a6:	42a6      	cmp	r6, r4
 80003a8:	d105      	bne.n	80003b6 <__libc_init_array+0x2e>
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b0:	4798      	blx	r3
 80003b2:	3601      	adds	r6, #1
 80003b4:	e7ee      	b.n	8000394 <__libc_init_array+0xc>
 80003b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ba:	4798      	blx	r3
 80003bc:	3601      	adds	r6, #1
 80003be:	e7f2      	b.n	80003a6 <__libc_init_array+0x1e>
 80003c0:	080003e8 	.word	0x080003e8
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e8 	.word	0x080003e8
 80003cc:	080003ec 	.word	0x080003ec

080003d0 <_init>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr

080003dc <_fini>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr
