
Timer_Pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000640  08000640  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000640  08000640  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000640  08000640  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000640  08000640  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000640  08000640  00001640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000644  08000644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000648  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014b0  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ed  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  000039d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000155  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca07  00000000  00000000  00003d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f85  00000000  00000000  00020714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0eb1  00000000  00000000  00022699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d354a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005bc  00000000  00000000  000d3590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000d3b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000628 	.word	0x08000628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000628 	.word	0x08000628

080001c8 <Timer1_PB14_PWM_config>:
#include "stm32f4xx.h"


	/***** Timer 1 PB14  LED 3 - Working ******/
void Timer1_PB14_PWM_config(void )
	{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
		RCC->AHB1ENR|=(1<<1);  // Port PB14 LED 3
 80001cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000240 <Timer1_PB14_PWM_config+0x78>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000240 <Timer1_PB14_PWM_config+0x78>)
 80001d2:	f043 0302 	orr.w	r3, r3, #2
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
		RCC->APB2ENR|=(1<<0);  // Enable Timer1 in APB2ENR
 80001d8:	4b19      	ldr	r3, [pc, #100]	@ (8000240 <Timer1_PB14_PWM_config+0x78>)
 80001da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001dc:	4a18      	ldr	r2, [pc, #96]	@ (8000240 <Timer1_PB14_PWM_config+0x78>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6453      	str	r3, [r2, #68]	@ 0x44
		GPIOB->MODER|=(2<<28); // Set MODER 14 as Alternate Function mode
 80001e4:	4b17      	ldr	r3, [pc, #92]	@ (8000244 <Timer1_PB14_PWM_config+0x7c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a16      	ldr	r2, [pc, #88]	@ (8000244 <Timer1_PB14_PWM_config+0x7c>)
 80001ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80001ee:	6013      	str	r3, [r2, #0]
		GPIOB->AFR[1]=(1<<24); // Config AFRH14 to AF1 => TIM1_CH2N
 80001f0:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <Timer1_PB14_PWM_config+0x7c>)
 80001f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80001f6:	625a      	str	r2, [r3, #36]	@ 0x24

		TIM1->PSC    =0;
 80001f8:	4b13      	ldr	r3, [pc, #76]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR    =999;
 80001fe:	4b12      	ldr	r3, [pc, #72]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 8000200:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000204:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CCMR1|=(6<<12); // OC2M - Output Compare 2 Mode Enable PWM1
 8000206:	4b10      	ldr	r3, [pc, #64]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a0f      	ldr	r2, [pc, #60]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 800020c:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000210:	6193      	str	r3, [r2, #24]
		TIM1->CCER |=(5<<4);  // CC2NE and CC2E set 1
 8000212:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 8000214:	6a1b      	ldr	r3, [r3, #32]
 8000216:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 8000218:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800021c:	6213      	str	r3, [r2, #32]
		TIM1->CR1  |=(1<<0);  // Counter Enable CEN=1
 800021e:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a09      	ldr	r2, [pc, #36]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6013      	str	r3, [r2, #0]
		TIM1->BDTR |=(1<<15); // MOE = 1 Main Output Enable
 800022a:	4b07      	ldr	r3, [pc, #28]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 800022c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800022e:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <Timer1_PB14_PWM_config+0x80>)
 8000230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000234:	6453      	str	r3, [r2, #68]	@ 0x44

	}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	40023800 	.word	0x40023800
 8000244:	40020400 	.word	0x40020400
 8000248:	40010000 	.word	0x40010000

0800024c <TIMER1_PB14_set_dutycycle>:

void TIMER1_PB14_set_dutycycle(uint32_t freq, uint32_t duty_cycle, uint8_t channel)
	{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	4613      	mov	r3, r2
 8000258:	71fb      	strb	r3, [r7, #7]
			TIM1->ARR=((16000000/freq)-1);
 800025a:	4a1f      	ldr	r2, [pc, #124]	@ (80002d8 <TIMER1_PB14_set_dutycycle+0x8c>)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000262:	4a1e      	ldr	r2, [pc, #120]	@ (80002dc <TIMER1_PB14_set_dutycycle+0x90>)
 8000264:	3b01      	subs	r3, #1
 8000266:	62d3      	str	r3, [r2, #44]	@ 0x2c

			switch(channel)
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	2b03      	cmp	r3, #3
 800026c:	d020      	beq.n	80002b0 <TIMER1_PB14_set_dutycycle+0x64>
 800026e:	2b03      	cmp	r3, #3
 8000270:	dc2b      	bgt.n	80002ca <TIMER1_PB14_set_dutycycle+0x7e>
 8000272:	2b01      	cmp	r3, #1
 8000274:	d002      	beq.n	800027c <TIMER1_PB14_set_dutycycle+0x30>
 8000276:	2b02      	cmp	r3, #2
 8000278:	d00d      	beq.n	8000296 <TIMER1_PB14_set_dutycycle+0x4a>
				break;
			case 3:
				TIM1->CCR3=(duty_cycle*((TIM1->ARR)+1))/100;
				break;
			default:
				break;
 800027a:	e026      	b.n	80002ca <TIMER1_PB14_set_dutycycle+0x7e>
				TIM1->CCR1=(duty_cycle*((TIM1->ARR)+1))/100;
 800027c:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <TIMER1_PB14_set_dutycycle+0x90>)
 800027e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000280:	3301      	adds	r3, #1
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	fb02 f303 	mul.w	r3, r2, r3
 8000288:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <TIMER1_PB14_set_dutycycle+0x90>)
 800028a:	4915      	ldr	r1, [pc, #84]	@ (80002e0 <TIMER1_PB14_set_dutycycle+0x94>)
 800028c:	fba1 1303 	umull	r1, r3, r1, r3
 8000290:	095b      	lsrs	r3, r3, #5
 8000292:	6353      	str	r3, [r2, #52]	@ 0x34
				break;
 8000294:	e01a      	b.n	80002cc <TIMER1_PB14_set_dutycycle+0x80>
				TIM1->CCR2=(duty_cycle*((TIM1->ARR)+1))/100;
 8000296:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <TIMER1_PB14_set_dutycycle+0x90>)
 8000298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800029a:	3301      	adds	r3, #1
 800029c:	68ba      	ldr	r2, [r7, #8]
 800029e:	fb02 f303 	mul.w	r3, r2, r3
 80002a2:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <TIMER1_PB14_set_dutycycle+0x90>)
 80002a4:	490e      	ldr	r1, [pc, #56]	@ (80002e0 <TIMER1_PB14_set_dutycycle+0x94>)
 80002a6:	fba1 1303 	umull	r1, r3, r1, r3
 80002aa:	095b      	lsrs	r3, r3, #5
 80002ac:	6393      	str	r3, [r2, #56]	@ 0x38
				break;
 80002ae:	e00d      	b.n	80002cc <TIMER1_PB14_set_dutycycle+0x80>
				TIM1->CCR3=(duty_cycle*((TIM1->ARR)+1))/100;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <TIMER1_PB14_set_dutycycle+0x90>)
 80002b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002b4:	3301      	adds	r3, #1
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	fb02 f303 	mul.w	r3, r2, r3
 80002bc:	4a07      	ldr	r2, [pc, #28]	@ (80002dc <TIMER1_PB14_set_dutycycle+0x90>)
 80002be:	4908      	ldr	r1, [pc, #32]	@ (80002e0 <TIMER1_PB14_set_dutycycle+0x94>)
 80002c0:	fba1 1303 	umull	r1, r3, r1, r3
 80002c4:	095b      	lsrs	r3, r3, #5
 80002c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
				break;
 80002c8:	e000      	b.n	80002cc <TIMER1_PB14_set_dutycycle+0x80>
				break;
 80002ca:	bf00      	nop
			}
	 }
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	00f42400 	.word	0x00f42400
 80002dc:	40010000 	.word	0x40010000
 80002e0:	51eb851f 	.word	0x51eb851f

080002e4 <Timer1_PB15_PWM_config>:

/***** Timer 1 PB15  LED 2 ******/

void Timer1_PB15_PWM_config(void )
	{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
		RCC->AHB1ENR|=(1<<1);  // Port PB15 LED 2
 80002e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000368 <Timer1_PB15_PWM_config+0x84>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000368 <Timer1_PB15_PWM_config+0x84>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6313      	str	r3, [r2, #48]	@ 0x30
		RCC->APB2ENR|=(1<<0);  // Enable Timer1 in APB2ENR
 80002f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000368 <Timer1_PB15_PWM_config+0x84>)
 80002f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <Timer1_PB15_PWM_config+0x84>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6453      	str	r3, [r2, #68]	@ 0x44
		//GPIOB->MODER|=(2<<30); // Set MODER 15 as Alternate Function mode
		GPIOB->MODER|=(1<<31);
 8000300:	4b1a      	ldr	r3, [pc, #104]	@ (800036c <Timer1_PB15_PWM_config+0x88>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a19      	ldr	r2, [pc, #100]	@ (800036c <Timer1_PB15_PWM_config+0x88>)
 8000306:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800030a:	6013      	str	r3, [r2, #0]
		GPIOB->MODER&=~(1<<30);
 800030c:	4b17      	ldr	r3, [pc, #92]	@ (800036c <Timer1_PB15_PWM_config+0x88>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a16      	ldr	r2, [pc, #88]	@ (800036c <Timer1_PB15_PWM_config+0x88>)
 8000312:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000316:	6013      	str	r3, [r2, #0]
		GPIOB->AFR[1]=(1<<28); // Config AFRH15 to AF1 => TIM1_CH3N
 8000318:	4b14      	ldr	r3, [pc, #80]	@ (800036c <Timer1_PB15_PWM_config+0x88>)
 800031a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800031e:	625a      	str	r2, [r3, #36]	@ 0x24

		TIM1->PSC    =0;
 8000320:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 8000322:	2200      	movs	r2, #0
 8000324:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR    =999;
 8000326:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 8000328:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800032c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CCMR2|=(6<<4);  // OC3M - Output Compare 3 Mode Enable PWM1
 800032e:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	4a0f      	ldr	r2, [pc, #60]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 8000334:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000338:	61d3      	str	r3, [r2, #28]
		TIM1->CCER |=(5<<8);  // CC3NE and CC3E set 1
 800033a:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 800033c:	6a1b      	ldr	r3, [r3, #32]
 800033e:	4a0c      	ldr	r2, [pc, #48]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 8000340:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8000344:	6213      	str	r3, [r2, #32]
		TIM1->CR1  |=(1<<0);  // Counter Enable CEN=1
 8000346:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6013      	str	r3, [r2, #0]
		TIM1->BDTR |=(1<<15); // MOE = 1 Main Output Enable
 8000352:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 8000354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000356:	4a06      	ldr	r2, [pc, #24]	@ (8000370 <Timer1_PB15_PWM_config+0x8c>)
 8000358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800035c:	6453      	str	r3, [r2, #68]	@ 0x44

	}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40023800 	.word	0x40023800
 800036c:	40020400 	.word	0x40020400
 8000370:	40010000 	.word	0x40010000

08000374 <TIMER1_PB15_set_dutycycle>:

void TIMER1_PB15_set_dutycycle(uint32_t freq, uint32_t duty_cycle, uint8_t channel)
	{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	4613      	mov	r3, r2
 8000380:	71fb      	strb	r3, [r7, #7]
			TIM1->ARR=((16000000/freq)-1);
 8000382:	4a1f      	ldr	r2, [pc, #124]	@ (8000400 <TIMER1_PB15_set_dutycycle+0x8c>)
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	fbb2 f3f3 	udiv	r3, r2, r3
 800038a:	4a1e      	ldr	r2, [pc, #120]	@ (8000404 <TIMER1_PB15_set_dutycycle+0x90>)
 800038c:	3b01      	subs	r3, #1
 800038e:	62d3      	str	r3, [r2, #44]	@ 0x2c

			switch(channel)
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	2b03      	cmp	r3, #3
 8000394:	d020      	beq.n	80003d8 <TIMER1_PB15_set_dutycycle+0x64>
 8000396:	2b03      	cmp	r3, #3
 8000398:	dc2b      	bgt.n	80003f2 <TIMER1_PB15_set_dutycycle+0x7e>
 800039a:	2b01      	cmp	r3, #1
 800039c:	d002      	beq.n	80003a4 <TIMER1_PB15_set_dutycycle+0x30>
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d00d      	beq.n	80003be <TIMER1_PB15_set_dutycycle+0x4a>
				break;
			case 3:
				TIM1->CCR3=(duty_cycle*((TIM1->ARR)+1))/100;
				break;
			default:
				break;
 80003a2:	e026      	b.n	80003f2 <TIMER1_PB15_set_dutycycle+0x7e>
				TIM1->CCR1=(duty_cycle*((TIM1->ARR)+1))/100;
 80003a4:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <TIMER1_PB15_set_dutycycle+0x90>)
 80003a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003a8:	3301      	adds	r3, #1
 80003aa:	68ba      	ldr	r2, [r7, #8]
 80003ac:	fb02 f303 	mul.w	r3, r2, r3
 80003b0:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <TIMER1_PB15_set_dutycycle+0x90>)
 80003b2:	4915      	ldr	r1, [pc, #84]	@ (8000408 <TIMER1_PB15_set_dutycycle+0x94>)
 80003b4:	fba1 1303 	umull	r1, r3, r1, r3
 80003b8:	095b      	lsrs	r3, r3, #5
 80003ba:	6353      	str	r3, [r2, #52]	@ 0x34
				break;
 80003bc:	e01a      	b.n	80003f4 <TIMER1_PB15_set_dutycycle+0x80>
				TIM1->CCR2=(duty_cycle*((TIM1->ARR)+1))/100;
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <TIMER1_PB15_set_dutycycle+0x90>)
 80003c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003c2:	3301      	adds	r3, #1
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <TIMER1_PB15_set_dutycycle+0x90>)
 80003cc:	490e      	ldr	r1, [pc, #56]	@ (8000408 <TIMER1_PB15_set_dutycycle+0x94>)
 80003ce:	fba1 1303 	umull	r1, r3, r1, r3
 80003d2:	095b      	lsrs	r3, r3, #5
 80003d4:	6393      	str	r3, [r2, #56]	@ 0x38
				break;
 80003d6:	e00d      	b.n	80003f4 <TIMER1_PB15_set_dutycycle+0x80>
				TIM1->CCR3=(duty_cycle*((TIM1->ARR)+1))/100;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <TIMER1_PB15_set_dutycycle+0x90>)
 80003da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003dc:	3301      	adds	r3, #1
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	fb02 f303 	mul.w	r3, r2, r3
 80003e4:	4a07      	ldr	r2, [pc, #28]	@ (8000404 <TIMER1_PB15_set_dutycycle+0x90>)
 80003e6:	4908      	ldr	r1, [pc, #32]	@ (8000408 <TIMER1_PB15_set_dutycycle+0x94>)
 80003e8:	fba1 1303 	umull	r1, r3, r1, r3
 80003ec:	095b      	lsrs	r3, r3, #5
 80003ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
				break;
 80003f0:	e000      	b.n	80003f4 <TIMER1_PB15_set_dutycycle+0x80>
				break;
 80003f2:	bf00      	nop
			}
	 }
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	00f42400 	.word	0x00f42400
 8000404:	40010000 	.word	0x40010000
 8000408:	51eb851f 	.word	0x51eb851f

0800040c <main>:

int main()
	{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
		while(1)
		{
			Timer1_PB15_PWM_config();
 8000412:	f7ff ff67 	bl	80002e4 <Timer1_PB15_PWM_config>
			//Channel 3 enabled
			TIMER1_PB15_set_dutycycle(10000,80,3);
 8000416:	2203      	movs	r2, #3
 8000418:	2150      	movs	r1, #80	@ 0x50
 800041a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800041e:	f7ff ffa9 	bl	8000374 <TIMER1_PB15_set_dutycycle>
			for (unsigned int i=0;i<5000000;i++);
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	e002      	b.n	800042e <main+0x22>
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	3301      	adds	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	4a2a      	ldr	r2, [pc, #168]	@ (80004dc <main+0xd0>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d9f8      	bls.n	8000428 <main+0x1c>
			TIMER1_PB15_set_dutycycle(10000,40,3);
 8000436:	2203      	movs	r2, #3
 8000438:	2128      	movs	r1, #40	@ 0x28
 800043a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800043e:	f7ff ff99 	bl	8000374 <TIMER1_PB15_set_dutycycle>
			for (unsigned int i=0;i<5000000;i++);
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
 8000446:	e002      	b.n	800044e <main+0x42>
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	3301      	adds	r3, #1
 800044c:	613b      	str	r3, [r7, #16]
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	4a22      	ldr	r2, [pc, #136]	@ (80004dc <main+0xd0>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d9f8      	bls.n	8000448 <main+0x3c>
			TIMER1_PB15_set_dutycycle(10000,10,3);
 8000456:	2203      	movs	r2, #3
 8000458:	210a      	movs	r1, #10
 800045a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800045e:	f7ff ff89 	bl	8000374 <TIMER1_PB15_set_dutycycle>
			for (unsigned int i=0;i<5000000;i++);
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	e002      	b.n	800046e <main+0x62>
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3301      	adds	r3, #1
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4a1a      	ldr	r2, [pc, #104]	@ (80004dc <main+0xd0>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d9f8      	bls.n	8000468 <main+0x5c>
			//Channel 2 enabled
			Timer1_PB14_PWM_config();
 8000476:	f7ff fea7 	bl	80001c8 <Timer1_PB14_PWM_config>
			TIMER1_PB14_set_dutycycle(10000,80,2);
 800047a:	2202      	movs	r2, #2
 800047c:	2150      	movs	r1, #80	@ 0x50
 800047e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000482:	f7ff fee3 	bl	800024c <TIMER1_PB14_set_dutycycle>
			for (uint32_t i=0;i<5000000;i++);
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	e002      	b.n	8000492 <main+0x86>
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	3301      	adds	r3, #1
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	4a11      	ldr	r2, [pc, #68]	@ (80004dc <main+0xd0>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d9f8      	bls.n	800048c <main+0x80>
			TIMER1_PB14_set_dutycycle(10000,40,2);
 800049a:	2202      	movs	r2, #2
 800049c:	2128      	movs	r1, #40	@ 0x28
 800049e:	f242 7010 	movw	r0, #10000	@ 0x2710
 80004a2:	f7ff fed3 	bl	800024c <TIMER1_PB14_set_dutycycle>
			for (uint32_t i=0;i<5000000;i++);
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	e002      	b.n	80004b2 <main+0xa6>
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3301      	adds	r3, #1
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a09      	ldr	r2, [pc, #36]	@ (80004dc <main+0xd0>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d9f8      	bls.n	80004ac <main+0xa0>
			TIMER1_PB14_set_dutycycle(10000,10,2);
 80004ba:	2202      	movs	r2, #2
 80004bc:	210a      	movs	r1, #10
 80004be:	f242 7010 	movw	r0, #10000	@ 0x2710
 80004c2:	f7ff fec3 	bl	800024c <TIMER1_PB14_set_dutycycle>
			for (uint32_t i=0;i<5000000;i++);
 80004c6:	2300      	movs	r3, #0
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	e002      	b.n	80004d2 <main+0xc6>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	4a01      	ldr	r2, [pc, #4]	@ (80004dc <main+0xd0>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d9f8      	bls.n	80004cc <main+0xc0>
			Timer1_PB15_PWM_config();
 80004da:	e79a      	b.n	8000412 <main+0x6>
 80004dc:	004c4b3f 	.word	0x004c4b3f

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <NMI_Handler+0x4>

080004e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <MemManage_Handler+0x4>

080004f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <UsageFault_Handler+0x4>

08000508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000536:	f000 f83f 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <SystemInit+0x20>)
 8000546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800054a:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <SystemInit+0x20>)
 800054c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800059c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000568:	f7ff ffea 	bl	8000540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	@ (80005a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	@ (80005b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000592:	f000 f825 	bl	80005e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000596:	f7ff ff39 	bl	800040c <main>
  bx  lr    
 800059a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800059c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005a8:	08000648 	.word	0x08000648
  ldr r2, =_sbss
 80005ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005b0:	20000024 	.word	0x20000024

080005b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC_IRQHandler>
	...

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000020 	.word	0x20000020

080005e0 <__libc_init_array>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000618 <__libc_init_array+0x38>)
 80005e4:	4c0d      	ldr	r4, [pc, #52]	@ (800061c <__libc_init_array+0x3c>)
 80005e6:	1b64      	subs	r4, r4, r5
 80005e8:	10a4      	asrs	r4, r4, #2
 80005ea:	2600      	movs	r6, #0
 80005ec:	42a6      	cmp	r6, r4
 80005ee:	d109      	bne.n	8000604 <__libc_init_array+0x24>
 80005f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000620 <__libc_init_array+0x40>)
 80005f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000624 <__libc_init_array+0x44>)
 80005f4:	f000 f818 	bl	8000628 <_init>
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	2600      	movs	r6, #0
 80005fe:	42a6      	cmp	r6, r4
 8000600:	d105      	bne.n	800060e <__libc_init_array+0x2e>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f855 3b04 	ldr.w	r3, [r5], #4
 8000608:	4798      	blx	r3
 800060a:	3601      	adds	r6, #1
 800060c:	e7ee      	b.n	80005ec <__libc_init_array+0xc>
 800060e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000612:	4798      	blx	r3
 8000614:	3601      	adds	r6, #1
 8000616:	e7f2      	b.n	80005fe <__libc_init_array+0x1e>
 8000618:	08000640 	.word	0x08000640
 800061c:	08000640 	.word	0x08000640
 8000620:	08000640 	.word	0x08000640
 8000624:	08000644 	.word	0x08000644

08000628 <_init>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr

08000634 <_fini>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	bf00      	nop
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr
